name: CI (JDK17 / Spring Boot 3.5.6)

on:
  push:
    branches: [ "main", "develop" ]
  pull_request:
    branches: [ "main", "develop" ]
  workflow_dispatch: {}

permissions:
  contents: read
  packages: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  BOOT_VERSION: "3.5.6"
  IMAGE_NAME: "ranking-stream"

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # --- JDK 17 + Gradle 캐시 ---
      - name: Set up JDK 17 (Gradle)
        if: ${{ hashFiles('**/build.gradle','**/build.gradle.kts') != '' }}
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'
          cache: gradle

      # --- JDK 17 + Maven 캐시 ---
      - name: Set up JDK 17 (Maven)
        if: ${{ hashFiles('**/pom.xml') != '' && hashFiles('**/build.gradle','**/build.gradle.kts') == '' }}
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'
          cache: maven

      # --- Spring Boot 3.5.6 일관성 확인 ---
      - name: Enforce Spring Boot ${{ env.BOOT_VERSION }}
        shell: bash
        run: |
          FAILS=()
          for f in $(git ls-files '**/build.gradle' '**/build.gradle.kts' '**/settings.gradle' '**/settings.gradle.kts'); do
            if grep -q "org.springframework.boot" "$f"; then
              grep -Eq "3\.5\.6" "$f" || FAILS+=("$f")
            fi
          done
          for p in $(git ls-files '**/pom.xml'); do
            if grep -q "spring-boot" "$p"; then
              grep -q "3.5.6" "$p" || FAILS+=("$p")
            fi
          done
          if [ ${#FAILS[@]} -gt 0 ]; then
            echo "❌ Spring Boot ${BOOT_VERSION}가 아닌 파일:"
            printf ' - %s\n' "${FAILS[@]}"
            exit 1
          fi

      # --- Gradle 빌드 ---
      - name: Build (skip tests)
        if: ${{ hashFiles('**/build.gradle','**/build.gradle.kts') != '' }}
        run: |
          chmod +x ./gradlew || true
          ./gradlew clean build -x test --no-daemon --stacktrace

      # --- Maven 빌드 ---
      - name: Build (Maven)
        if: ${{ hashFiles('**/pom.xml') != '' && hashFiles('**/build.gradle','**/build.gradle.kts') == '' }}
        run: mvn -B -ntp --no-transfer-progress clean package -DskipTests

      # --- Docker (옵션: Dockerfile 있을 때만) ---
      - name: Set up Docker Buildx
        if: ${{ hashFiles('**/Dockerfile') != '' }}
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        if: ${{ hashFiles('**/Dockerfile') != '' }}
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.dockerhub_username }}   # <- 네가 만든 소문자 시크릿명
          password: ${{ secrets.dockerhub_token }}

      - name: Build & Push image (develop)
        if: ${{ hashFiles('**/Dockerfile') != '' && github.ref == 'refs/heads/develop' }}
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: |
            docker.io/${{ secrets.dockerhub_username }}/${{ env.IMAGE_NAME }}:develop
            docker.io/${{ secrets.dockerhub_username }}/${{ env.IMAGE_NAME }}:${{ github.sha }}

      - name: Build & Push image (main)
        if: ${{ hashFiles('**/Dockerfile') != '' && github.ref == 'refs/heads/main' }}
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: |
            docker.io/${{ secrets.dockerhub_username }}/${{ env.IMAGE_NAME }}:latest
            docker.io/${{ secrets.dockerhub_username }}/${{ env.IMAGE_NAME }}:${{ github.sha }}

      # INFRA 레포를 토큰으로 체크아웃
      - name: Checkout INFRA
        if: ${{ github.ref == 'refs/heads/main' }}
        uses: actions/checkout@v4
        with:
          repository: KE-WhyNot/INFRA
          ref: main
          token: ${{ secrets.INFRA_PAT }}
          path: INFRA

      # yq 설치
      - name: Install yq
        if: ${{ github.ref == 'refs/heads/main' }}
        run: |
          sudo curl -L https://github.com/mikefarah/yq/releases/download/v4.44.3/yq_linux_amd64 -o /usr/local/bin/yq
          sudo chmod +x /usr/local/bin/yq

      # Helm values.yaml 업데이트 (기존 K8s 매니페스트 대신)
      - name: Update Helm Values in Infrastructure Repository
        if: ${{ github.ref == 'refs/heads/main' }}
        env:
          IMAGE_REPO: docker.io/${{ secrets.dockerhub_username }}/${{ env.IMAGE_NAME }}
          IMAGE_TAG: ${{ github.sha }}
          SERVICE_NAME: ${{ env.IMAGE_NAME }}
          HELM_VALUES_PATH: k8s/ranking-stream/helm/values.yaml
        run: |
          set -euo pipefail
          cd INFRA
          
          # 1) Helm values.yaml에서 image.repository와 image.tag 업데이트
          yq -i '.image.repository = env(IMAGE_REPO)' "$HELM_VALUES_PATH"
          yq -i '.image.tag = env(IMAGE_TAG)' "$HELM_VALUES_PATH"
          
          # 변경 없으면 정상 종료
          if git diff --quiet; then
            echo "No changes to commit. Helm values already up to date."
            exit 0
          fi
          
          # 커밋 메시지 구성
          SHORT_SHA="${IMAGE_TAG:0:12}"
          BRANCH="${GITHUB_REF_NAME:-${GITHUB_REF##*/}}"
          TAG_HINT=$([ "$BRANCH" = "main" ] && echo "latest" || echo "$BRANCH")
          SUBJECT="[CHORE] 헬름 이미지 업데이트: ${SERVICE_NAME} → ${SHORT_SHA} (${TAG_HINT})"
          RUN_URL="https://github.com/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}"
          BODY=$'헬름 차트 이미지 자동 업데이트\n\n- 이미지: '"${IMAGE_REPO}:${IMAGE_TAG}"$'\n- 브랜치: '"${BRANCH}"$'\n- 소스: '"${RUN_URL}"$'\n- 헬름 경로: '"${HELM_VALUES_PATH}"$'\n'
          
          git config user.email "action@github.com"
          git config user.name "github-actions[bot]"
          git add "$HELM_VALUES_PATH"
          git commit -m "$SUBJECT" -m "$BODY"
          git push origin HEAD:main

      # --- 산출물/리포트 업로드 ---
      - name: Upload JARs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: app-jars
          path: |
            **/build/libs/*.jar
            **/target/*.jar
          if-no-files-found: ignore
